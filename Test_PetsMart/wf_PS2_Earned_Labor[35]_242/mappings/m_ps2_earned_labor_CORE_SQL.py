# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_ps2_earned_labor_CORE_SQL")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_ps2_earned_labor_CORE_SQL", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_PS2_C_EARN_PRE_0


query_0 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  WEIGHTED_AVG_WAGE_RATE AS WEIGHTED_AVG_WAGE_RATE,
  ACT_SAL_MGR_AMT AS ACT_SAL_MGR_AMT,
  EARNED_OT_HRS AS EARNED_OT_HRS,
  EARNED_OT_AMT AS EARNED_OT_AMT
FROM
  PS2_C_EARN_PRE"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_PS2_C_EARN_PRE_0")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_PS2_EARNED_HRS_1


query_1 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  WFA_BUSN_AREA_ID AS WFA_BUSN_AREA_ID,
  WFA_DEPT_ID AS WFA_DEPT_ID,
  WFA_TASK_ID AS WFA_TASK_ID,
  STORE_NBR AS STORE_NBR,
  WFA_BUSN_AREA_DESC AS WFA_BUSN_AREA_DESC,
  WFA_DEPT_DESC AS WFA_DEPT_DESC,
  WFA_TASK_DESC AS WFA_TASK_DESC,
  EARNED_HRS AS EARNED_HRS,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  PS2_EARNED_HRS"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("Shortcut_to_PS2_EARNED_HRS_1")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_CURRENCY_DAY_2


query_2 = f"""SELECT
  DAY_DT AS DAY_DT,
  CURRENCY_ID AS CURRENCY_ID,
  DATE_RATE_START AS DATE_RATE_START,
  CURRENCY_TYPE AS CURRENCY_TYPE,
  DATE_RATE_ENDED AS DATE_RATE_ENDED,
  EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
  RATIO_TO AS RATIO_TO,
  RATIO_FROM AS RATIO_FROM,
  STORE_CTRY_ABBR AS STORE_CTRY_ABBR,
  CURRENCY_NBR AS CURRENCY_NBR
FROM
  CURRENCY_DAY"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Shortcut_to_CURRENCY_DAY_2")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_DAYS_3


query_3 = f"""SELECT
  DAY_DT AS DAY_DT,
  BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,
  HOLIDAY_FLAG AS HOLIDAY_FLAG,
  DAY_OF_WK_NAME AS DAY_OF_WK_NAME,
  DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,
  DAY_OF_WK_NBR AS DAY_OF_WK_NBR,
  CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,
  CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,
  CAL_WK AS CAL_WK,
  CAL_WK_NBR AS CAL_WK_NBR,
  CAL_MO AS CAL_MO,
  CAL_MO_NBR AS CAL_MO_NBR,
  CAL_MO_NAME AS CAL_MO_NAME,
  CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,
  CAL_QTR AS CAL_QTR,
  CAL_QTR_NBR AS CAL_QTR_NBR,
  CAL_HALF AS CAL_HALF,
  CAL_YR AS CAL_YR,
  FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,
  FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_WK_NBR AS FISCAL_WK_NBR,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_MO_NBR AS FISCAL_MO_NBR,
  FISCAL_MO_NAME AS FISCAL_MO_NAME,
  FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,
  FISCAL_QTR AS FISCAL_QTR,
  FISCAL_QTR_NBR AS FISCAL_QTR_NBR,
  FISCAL_HALF AS FISCAL_HALF,
  FISCAL_YR AS FISCAL_YR,
  LYR_WEEK_DT AS LYR_WEEK_DT,
  LWK_WEEK_DT AS LWK_WEEK_DT,
  WEEK_DT AS WEEK_DT,
  EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,
  EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,
  ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,
  ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,
  CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,
  CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,
  CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,
  CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,
  MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,
  MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,
  MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,
  MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,
  PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,
  PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS
FROM
  DAYS"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("Shortcut_to_DAYS_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SITE_PROFILE_4


query_4 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  LOCATION_TYPE_ID AS LOCATION_TYPE_ID,
  STORE_NBR AS STORE_NBR,
  STORE_NAME AS STORE_NAME,
  STORE_TYPE_ID AS STORE_TYPE_ID,
  STORE_OPEN_CLOSE_FLAG AS STORE_OPEN_CLOSE_FLAG,
  COMPANY_ID AS COMPANY_ID,
  REGION_ID AS REGION_ID,
  DISTRICT_ID AS DISTRICT_ID,
  PRICE_ZONE_ID AS PRICE_ZONE_ID,
  PRICE_AD_ZONE_ID AS PRICE_AD_ZONE_ID,
  REPL_DC_NBR AS REPL_DC_NBR,
  REPL_FISH_DC_NBR AS REPL_FISH_DC_NBR,
  REPL_FWD_DC_NBR AS REPL_FWD_DC_NBR,
  SQ_FEET_RETAIL AS SQ_FEET_RETAIL,
  SQ_FEET_TOTAL AS SQ_FEET_TOTAL,
  SITE_ADDRESS AS SITE_ADDRESS,
  SITE_CITY AS SITE_CITY,
  STATE_CD AS STATE_CD,
  COUNTRY_CD AS COUNTRY_CD,
  POSTAL_CD AS POSTAL_CD,
  SITE_MAIN_TELE_NO AS SITE_MAIN_TELE_NO,
  SITE_GROOM_TELE_NO AS SITE_GROOM_TELE_NO,
  SITE_EMAIL_ADDRESS AS SITE_EMAIL_ADDRESS,
  SITE_SALES_FLAG AS SITE_SALES_FLAG,
  EQUINE_MERCH_ID AS EQUINE_MERCH_ID,
  EQUINE_SITE_ID AS EQUINE_SITE_ID,
  EQUINE_SITE_OPEN_DT AS EQUINE_SITE_OPEN_DT,
  GEO_LATITUDE_NBR AS GEO_LATITUDE_NBR,
  GEO_LONGITUDE_NBR AS GEO_LONGITUDE_NBR,
  PETSMART_DMA_CD AS PETSMART_DMA_CD,
  LOYALTY_PGM_TYPE_ID AS LOYALTY_PGM_TYPE_ID,
  LOYALTY_PGM_STATUS_ID AS LOYALTY_PGM_STATUS_ID,
  LOYALTY_PGM_START_DT AS LOYALTY_PGM_START_DT,
  LOYALTY_PGM_CHANGE_DT AS LOYALTY_PGM_CHANGE_DT,
  BP_COMPANY_NBR AS BP_COMPANY_NBR,
  BP_GL_ACCT AS BP_GL_ACCT,
  TP_LOC_FLAG AS TP_LOC_FLAG,
  TP_ACTIVE_CNT AS TP_ACTIVE_CNT,
  PROMO_LABEL_CD AS PROMO_LABEL_CD,
  PARENT_LOCATION_ID AS PARENT_LOCATION_ID,
  LOCATION_NBR AS LOCATION_NBR,
  TIME_ZONE_ID AS TIME_ZONE_ID,
  DELV_SERVICE_CLASS_ID AS DELV_SERVICE_CLASS_ID,
  PICK_SERVICE_CLASS_ID AS PICK_SERVICE_CLASS_ID,
  SITE_LOGIN_ID AS SITE_LOGIN_ID,
  SITE_MANAGER_ID AS SITE_MANAGER_ID,
  SITE_OPEN_YRS_AMT AS SITE_OPEN_YRS_AMT,
  HOTEL_FLAG AS HOTEL_FLAG,
  DAYCAMP_FLAG AS DAYCAMP_FLAG,
  VET_FLAG AS VET_FLAG,
  DIST_MGR_NAME AS DIST_MGR_NAME,
  DIST_SVC_MGR_NAME AS DIST_SVC_MGR_NAME,
  REGION_VP_NAME AS REGION_VP_NAME,
  REGION_TRAINER_NAME AS REGION_TRAINER_NAME,
  ASSET_PROTECT_NAME AS ASSET_PROTECT_NAME,
  SITE_COUNTY AS SITE_COUNTY,
  SITE_FAX_NO AS SITE_FAX_NO,
  SFT_OPEN_DT AS SFT_OPEN_DT,
  DM_EMAIL_ADDRESS AS DM_EMAIL_ADDRESS,
  DSM_EMAIL_ADDRESS AS DSM_EMAIL_ADDRESS,
  RVP_EMAIL_ADDRESS AS RVP_EMAIL_ADDRESS,
  TRADE_AREA AS TRADE_AREA,
  FDLPS_NAME AS FDLPS_NAME,
  FDLPS_EMAIL AS FDLPS_EMAIL,
  OVERSITE_MGR_NAME AS OVERSITE_MGR_NAME,
  OVERSITE_MGR_EMAIL AS OVERSITE_MGR_EMAIL,
  SAFETY_DIRECTOR_NAME AS SAFETY_DIRECTOR_NAME,
  SAFETY_DIRECTOR_EMAIL AS SAFETY_DIRECTOR_EMAIL,
  RETAIL_MANAGER_SAFETY_NAME AS RETAIL_MANAGER_SAFETY_NAME,
  RETAIL_MANAGER_SAFETY_EMAIL AS RETAIL_MANAGER_SAFETY_EMAIL,
  AREA_DIRECTOR_NAME AS AREA_DIRECTOR_NAME,
  AREA_DIRECTOR_EMAIL AS AREA_DIRECTOR_EMAIL,
  DC_GENERAL_MANAGER_NAME AS DC_GENERAL_MANAGER_NAME,
  DC_GENERAL_MANAGER_EMAIL AS DC_GENERAL_MANAGER_EMAIL,
  ASST_DC_GENERAL_MANAGER_NAME1 AS ASST_DC_GENERAL_MANAGER_NAME1,
  ASST_DC_GENERAL_MANAGER_EMAIL1 AS ASST_DC_GENERAL_MANAGER_EMAIL1,
  ASST_DC_GENERAL_MANAGER_NAME2 AS ASST_DC_GENERAL_MANAGER_NAME2,
  ASST_DC_GENERAL_MANAGER_EMAIL2 AS ASST_DC_GENERAL_MANAGER_EMAIL2,
  REGIONAL_DC_SAFETY_MGR_NAME AS REGIONAL_DC_SAFETY_MGR_NAME,
  REGIONAL_DC_SAFETY_MGR_EMAIL AS REGIONAL_DC_SAFETY_MGR_EMAIL,
  DC_PEOPLE_SUPERVISOR_NAME AS DC_PEOPLE_SUPERVISOR_NAME,
  DC_PEOPLE_SUPERVISOR_EMAIL AS DC_PEOPLE_SUPERVISOR_EMAIL,
  PEOPLE_MANAGER_NAME AS PEOPLE_MANAGER_NAME,
  PEOPLE_MANAGER_EMAIL AS PEOPLE_MANAGER_EMAIL,
  ASSET_PROT_DIR_NAME AS ASSET_PROT_DIR_NAME,
  ASSET_PROT_DIR_EMAIL AS ASSET_PROT_DIR_EMAIL,
  SR_REG_ASSET_PROT_MGR_NAME AS SR_REG_ASSET_PROT_MGR_NAME,
  SR_REG_ASSET_PROT_MGR_EMAIL AS SR_REG_ASSET_PROT_MGR_EMAIL,
  REG_ASSET_PROT_MGR_NAME AS REG_ASSET_PROT_MGR_NAME,
  REG_ASSET_PROT_MGR_EMAIL AS REG_ASSET_PROT_MGR_EMAIL,
  ASSET_PROTECT_EMAIL AS ASSET_PROTECT_EMAIL,
  TP_START_DT AS TP_START_DT,
  OPEN_DT AS OPEN_DT,
  GR_OPEN_DT AS GR_OPEN_DT,
  CLOSE_DT AS CLOSE_DT,
  HOTEL_OPEN_DT AS HOTEL_OPEN_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  SITE_PROFILE"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_SITE_PROFILE_4")

# COMMAND ----------
# DBTITLE 1, SQ_Shortcut_to_PS2_CORE_EARNED_PRE_5


query_5 = f"""SELECT
  CURRENT_TIMESTAMP AS START_TSTMP,
  'PS2_EARNED_LABOR' AS TABLE_NAME,
  COUNT(*) AS BEGIN_ROW_CNT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  PS2_EARNED_LABOR"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SQ_Shortcut_to_PS2_CORE_EARNED_PRE_5")

# COMMAND ----------
# DBTITLE 1, SQL_INS_and_DUPS_CHECK_6


query_6 = f"""SELECT
  START_TSTMP AS null,
  TABLE_NAME AS null,
  BEGIN_ROW_CNT AS null,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_Shortcut_to_PS2_CORE_EARNED_PRE_5"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("SQL_INS_and_DUPS_CHECK_6")

# COMMAND ----------
# DBTITLE 1, EXP_GET_SESSION_INFO_7


query_7 = f"""SELECT
  TO_CHAR(START_TSTMP_output, 'MM/DD/YYYY HH24:MI:SS') AS START_TSTMP,
  TO_CHAR(now(), 'MM/DD/YYYY HH24:MI:SS') AS END_TSTMP,
  $PMWorkflowName AS WORKFLOW_NAME,
  $PMSessionName AS SESSION_NAME,
  $PMMappingName AS MAPPING_NAME,
  TABLE_NAME_output AS TABLE_NAME,
  BEGIN_ROW_CNT_output AS BEGIN_ROW_CNT,
  NumRowsAffected AS INSERT_ROW_CNT,
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  IFF(
    DUPLICATE_ROW_CNT > 0,
    'There are duplicate records in the table',
    SQLError
  ) AS SQL_TRANSFORM_ERROR,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQL_INS_and_DUPS_CHECK_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("EXP_GET_SESSION_INFO_7")

# COMMAND ----------
# DBTITLE 1, AGG_8


query_8 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  MAX(END_TSTMP) AS END_TSTMP,
  WORKFLOW_NAME AS WORKFLOW_NAME,
  SESSION_NAME AS SESSION_NAME,
  MAPPING_NAME AS MAPPING_NAME,
  TABLE_NAME AS TABLE_NAME,
  TO_CHAR(MAX(BEGIN_ROW_CNT)) AS BEGIN_ROW_CNT,
  TO_CHAR(SUM(INSERT_ROW_CNT)) AS INSERT_ROW_CNT,
  MAX(SQL_TRANSFORM_ERROR) AS SQL_TRANSFORM_ERROR,
  TO_CHAR(SUM(DUPLICATE_ROW_CNT)) AS DUPLICATE_ROW_CNT,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  EXP_GET_SESSION_INFO_7
GROUP BY
  START_TSTMP,
  WORKFLOW_NAME,
  SESSION_NAME,
  MAPPING_NAME,
  TABLE_NAME"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("AGG_8")

# COMMAND ----------
# DBTITLE 1, EXP_CREATE_INS_SQL_9


query_9 = f"""SELECT
  START_TSTMP AS START_TSTMP,
  END_TSTMP AS END_TSTMP,
  WORKFLOW_NAME AS WORKFLOW_NAME,
  SESSION_NAME AS SESSION_NAME,
  MAPPING_NAME AS MAPPING_NAME,
  TABLE_NAME AS TABLE_NAME,
  BEGIN_ROW_CNT AS BEGIN_ROW_CNT,
  INSERT_ROW_CNT AS INSERT_ROW_CNT,
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,
  'INSERT INTO SQL_TRANSFORM_LOG VALUES (TO_DATE(' || CHR(39) || START_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '),TO_DATE(' || CHR(39) || END_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '), ' || CHR(39) || WORKFLOW_NAME || CHR(39) || ', ' || CHR(39) || SESSION_NAME || CHR(39) || ', ' || CHR(39) || MAPPING_NAME || CHR(39) || ', ' || CHR(39) || TABLE_NAME || CHR(39) || ', ' || CHR(39) || BEGIN_ROW_CNT || CHR(39) || ', ' || CHR(39) || INSERT_ROW_CNT || CHR(39) || ', ' || CHR(39) || DUPLICATE_ROW_CNT || CHR(39) || ',  ' || CHR(39) || SQL_TRANSFORM_ERROR || CHR(39) || ')' AS INSERT_SQL,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  AGG_8"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("EXP_CREATE_INS_SQL_9")

# COMMAND ----------
# DBTITLE 1, SQL_INS_to_SQL_TRANSFORM_LOG_10


query_10 = f"""SELECT
  START_TSTMP AS null,
  END_TSTMP AS null,
  WORKFLOW_NAME AS null,
  SESSION_NAME AS null,
  MAPPING_NAME AS null,
  TABLE_NAME AS null,
  BEGIN_ROW_CNT AS null,
  INSERT_ROW_CNT AS null,
  DUPLICATE_ROW_CNT AS null,
  SQL_TRANSFORM_ERROR AS null,
  INSERT_SQL AS null,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  EXP_CREATE_INS_SQL_9"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("SQL_INS_to_SQL_TRANSFORM_LOG_10")

# COMMAND ----------
# DBTITLE 1, EXP_ABORT_SESSION_11


query_11 = f"""SELECT
  DUPLICATE_ROW_CNT_output AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR_output AS SQL_TRANSFORM_ERROR,
  IFF(
    TO_INTEGER(DUPLICATE_ROW_CNT_output) > 0,
    ABORT('There are duplicates rows in the table'),
    IFF(
      NOT ISNULL (SQL_TRANSFORM_ERROR_output),
      ABORT('There is an error in the INSERT statement')
    )
  ) AS ABORT_SESSION,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQL_INS_to_SQL_TRANSFORM_LOG_10"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("EXP_ABORT_SESSION_11")

# COMMAND ----------
# DBTITLE 1, SQL_TRANSFORM_DUMMY_TARGET


spark.sql("""INSERT INTO
  SQL_TRANSFORM_DUMMY_TARGET
SELECT
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,
  SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,
  SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,
  ABORT_SESSION AS ABORT_SESSION,
  ABORT_SESSION AS ABORT_SESSION
FROM
  EXP_ABORT_SESSION_11""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_ps2_earned_labor_CORE_SQL")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_ps2_earned_labor_CORE_SQL", mainWorkflowId, parentName)
