# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")

# COMMAND ----------
%run ./MappingUtility

# COMMAND ----------
mainWorkflowId = dbutils.widgets.get("mainWorkflowId")
mainWorkflowRunId = dbutils.widgets.get("mainWorkflowRunId")
parentName = dbutils.widgets.get("parentName")
preVariableAssignment = dbutils.widgets.get("preVariableAssignment")
postVariableAssignment = dbutils.widgets.get("postVariableAssignment")
truncTargetTableOptions = dbutils.widgets.get("truncTargetTableOptions")
variablesTableName = dbutils.widgets.get("variablesTableName")

# COMMAND ----------
#Truncate Target Tables
truncateTargetTables(truncTargetTableOptions)

# COMMAND ----------
#Pre presession variable updation
updateVariable(preVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_ps2_new_store_pre_SALES_PLAN_UPD")

# COMMAND ----------
fetchAndCreateVariables(parentName,"m_ps2_new_store_pre_SALES_PLAN_UPD", variablesTableName, mainWorkflowId)

# COMMAND ----------
# DBTITLE 1, Shortcut_to_PLAN_STORE_DAY_0


query_0 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  PLAN_VRSN_NM AS PLAN_VRSN_NM,
  PROFIT_CTR_NM AS PROFIT_CTR_NM,
  PROFIT_CTR_SUB_ID AS PROFIT_CTR_SUB_ID,
  CURRENCY_TYPE_ID AS CURRENCY_TYPE_ID,
  CURRENCY_TYPE_DESC AS CURRENCY_TYPE_DESC,
  WEEK_DT AS WEEK_DT,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_YR AS FISCAL_YR,
  STORE_NBR AS STORE_NBR,
  COUNTRY_CD AS COUNTRY_CD,
  PROFIT_CTR_SUB_NM AS PROFIT_CTR_SUB_NM,
  PLAN_VRSN_DT AS PLAN_VRSN_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  PLAN_MARGIN_AMT AS PLAN_MARGIN_AMT,
  PLAN_DISCOUNT_AMT AS PLAN_DISCOUNT_AMT,
  PLAN_ITEM_RMVL_AMT AS PLAN_ITEM_RMVL_AMT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  PLAN_STORE_DAY"""

df_0 = spark.sql(query_0)

df_0.createOrReplaceTempView("Shortcut_to_PLAN_STORE_DAY_0")

# COMMAND ----------
# DBTITLE 1, SQ_PLAN_STORE_DAY_1


query_1 = f"""SELECT
  DAY_DT AS DAY_DT,
  LOCATION_ID AS LOCATION_ID,
  PLAN_VRSN_NM AS PLAN_VRSN_NM,
  PROFIT_CTR_NM AS PROFIT_CTR_NM,
  PROFIT_CTR_SUB_ID AS PROFIT_CTR_SUB_ID,
  CURRENCY_TYPE_ID AS CURRENCY_TYPE_ID,
  CURRENCY_TYPE_DESC AS CURRENCY_TYPE_DESC,
  WEEK_DT AS WEEK_DT,
  FISCAL_WK AS FISCAL_WK,
  FISCAL_MO AS FISCAL_MO,
  FISCAL_YR AS FISCAL_YR,
  STORE_NBR AS STORE_NBR,
  COUNTRY_CD AS COUNTRY_CD,
  PROFIT_CTR_SUB_NM AS PROFIT_CTR_SUB_NM,
  PLAN_VRSN_DT AS PLAN_VRSN_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  PLAN_MARGIN_AMT AS PLAN_MARGIN_AMT,
  PLAN_DISCOUNT_AMT AS PLAN_DISCOUNT_AMT,
  PLAN_ITEM_RMVL_AMT AS PLAN_ITEM_RMVL_AMT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_PLAN_STORE_DAY_0"""

df_1 = spark.sql(query_1)

df_1.createOrReplaceTempView("SQ_PLAN_STORE_DAY_1")

# COMMAND ----------
# DBTITLE 1, Exp_PSD_2


query_2 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  PLAN_VRSN_NM AS PLAN_VRSN_NM,
  RTRIM(PROFIT_CTR_NM) AS PROFIT_CTR_NM,
  CURRENCY_TYPE_ID AS CURRENCY_TYPE_ID,
  WEEK_DT AS WEEK_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_PLAN_STORE_DAY_1"""

df_2 = spark.sql(query_2)

df_2.createOrReplaceTempView("Exp_PSD_2")

# COMMAND ----------
# DBTITLE 1, Fil_PSD_3


query_3 = f"""SELECT
  LOCATION_ID AS LOCATION_ID,
  PLAN_VRSN_NM AS PLAN_VRSN_NM,
  PROFIT_CTR_NM AS PROFIT_CTR_NM,
  CURRENCY_TYPE_ID AS CURRENCY_TYPE_ID,
  WEEK_DT AS WEEK_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Exp_PSD_2
WHERE
  UPPER(PLAN_VRSN_NM) = 'FORECAST'
  AND (
    UPPER(PROFIT_CTR_NM) = 'CORE'
    OR UPPER(PROFIT_CTR_NM) = 'SPECIALTY'
  )
  AND CURRENCY_TYPE_ID = 1"""

df_3 = spark.sql(query_3)

df_3.createOrReplaceTempView("Fil_PSD_3")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_PS2_NEW_STORE_PRE2_4


query_4 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  SFT_OPEN_DT AS SFT_OPEN_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  ACTUAL_SALES_AMT AS ACTUAL_SALES_AMT,
  CUSTOM_AD_HOC_HRS AS CUSTOM_AD_HOC_HRS,
  GRAND_OPENING_HRS AS GRAND_OPENING_HRS
FROM
  PS2_NEW_STORE_PRE"""

df_4 = spark.sql(query_4)

df_4.createOrReplaceTempView("Shortcut_to_PS2_NEW_STORE_PRE2_4")

# COMMAND ----------
# DBTITLE 1, SQ_PS2_NEW_STORE_PRE_5


query_5 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_PS2_NEW_STORE_PRE2_4"""

df_5 = spark.sql(query_5)

df_5.createOrReplaceTempView("SQ_PS2_NEW_STORE_PRE_5")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_PS2_NEW_STORE_PRE_6


query_6 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  SFT_OPEN_DT AS SFT_OPEN_DT,
  PLAN_SALES_AMT AS PLAN_SALES_AMT,
  ACTUAL_SALES_AMT AS ACTUAL_SALES_AMT,
  CUSTOM_AD_HOC_HRS AS CUSTOM_AD_HOC_HRS,
  GRAND_OPENING_HRS AS GRAND_OPENING_HRS
FROM
  PS2_NEW_STORE_PRE"""

df_6 = spark.sql(query_6)

df_6.createOrReplaceTempView("Shortcut_to_PS2_NEW_STORE_PRE_6")

# COMMAND ----------
# DBTITLE 1, SQ_PS2_NEW_STORE_PRE1_7


query_7 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_PS2_NEW_STORE_PRE_6"""

df_7 = spark.sql(query_7)

df_7.createOrReplaceTempView("SQ_PS2_NEW_STORE_PRE1_7")

# COMMAND ----------
# DBTITLE 1, Jnr_PSD_8


query_8 = f"""SELECT
  DETAIL.WEEK_DT AS WEEK_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.PLAN_SALES_AMT AS PLAN_SALES_AMT,
  MASTER.STORE_NBR AS STORE_NBR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_PS2_NEW_STORE_PRE1_7 MASTER
  INNER JOIN Fil_PSD_3 DETAIL ON MASTER.WEEK_DT = DETAIL.WEEK_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_8 = spark.sql(query_8)

df_8.createOrReplaceTempView("Jnr_PSD_8")

# COMMAND ----------
# DBTITLE 1, AGGTRANS_9


query_9 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  ROUND(SUM(PLAN_SALES_AMT), 2) AS PLAN_SALES_AMT1,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  Jnr_PSD_8
GROUP BY
  WEEK_DT,
  LOCATION_ID,
  STORE_NBR"""

df_9 = spark.sql(query_9)

df_9.createOrReplaceTempView("AGGTRANS_9")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SALES_DAY_SKU_STORE_RPT_10


query_10 = f"""SELECT
  DAY_DT AS DAY_DT,
  PRODUCT_ID AS PRODUCT_ID,
  LOCATION_ID AS LOCATION_ID,
  SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,
  WEEK_DT AS WEEK_DT,
  FISCAL_YR AS FISCAL_YR,
  SKU_NBR AS SKU_NBR,
  STORE_NBR AS STORE_NBR,
  OPT_SALES_TYPE_ID AS OPT_SALES_TYPE_ID,
  VENDOR_ID AS VENDOR_ID,
  PROMO_FLAG AS PROMO_FLAG,
  STATUS_ID AS STATUS_ID,
  BRAND_NAME AS BRAND_NAME,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  SKU_VEND_TXN_CNT AS SKU_VEND_TXN_CNT,
  NET_SALES_AMT AS NET_SALES_AMT,
  NET_SALES_QTY AS NET_SALES_QTY,
  NET_MARGIN_AMT AS NET_MARGIN_AMT,
  SALES_AMT AS SALES_AMT,
  SALES_COST AS SALES_COST,
  SALES_QTY AS SALES_QTY,
  RETURN_AMT AS RETURN_AMT,
  RETURN_COST AS RETURN_COST,
  RETURN_QTY AS RETURN_QTY,
  CLEARANCE_AMT AS CLEARANCE_AMT,
  CLEARANCE_QTY AS CLEARANCE_QTY,
  CLEARANCE_RETURN_AMT AS CLEARANCE_RETURN_AMT,
  CLEARANCE_RETURN_QTY AS CLEARANCE_RETURN_QTY,
  DISCOUNT_AMT AS DISCOUNT_AMT,
  DISCOUNT_QTY AS DISCOUNT_QTY,
  DISCOUNT_RETURN_AMT AS DISCOUNT_RETURN_AMT,
  DISCOUNT_RETURN_QTY AS DISCOUNT_RETURN_QTY,
  POS_COUPON_AMT AS POS_COUPON_AMT,
  POS_COUPON_QTY AS POS_COUPON_QTY,
  SPECIAL_SALES_AMT AS SPECIAL_SALES_AMT,
  SPECIAL_SALES_QTY AS SPECIAL_SALES_QTY,
  SPECIAL_RETURN_AMT AS SPECIAL_RETURN_AMT,
  SPECIAL_RETURN_QTY AS SPECIAL_RETURN_QTY,
  SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,
  SPECIAL_SRVC_QTY AS SPECIAL_SRVC_QTY,
  MA_SALES_AMT AS MA_SALES_AMT,
  MA_SALES_QTY AS MA_SALES_QTY,
  MA_TRANS_AMT AS MA_TRANS_AMT,
  MA_TRANS_COST AS MA_TRANS_COST,
  MA_TRANS_QTY AS MA_TRANS_QTY,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  UPDATE_DT AS UPDATE_DT,
  LOAD_DT AS LOAD_DT
FROM
  SALES_DAY_SKU_STORE_RPT"""

df_10 = spark.sql(query_10)

df_10.createOrReplaceTempView("Shortcut_to_SALES_DAY_SKU_STORE_RPT_10")

# COMMAND ----------
# DBTITLE 1, SQ_SALES_DAY_SKU_STORE_RPT_11


query_11 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  LOCATION_ID AS LOCATION_ID,
  WEEK_DT AS WEEK_DT,
  NET_SALES_AMT AS NET_SALES_AMT,
  EXCH_RATE_PCT AS EXCH_RATE_PCT,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SALES_DAY_SKU_STORE_RPT_10"""

df_11 = spark.sql(query_11)

df_11.createOrReplaceTempView("SQ_SALES_DAY_SKU_STORE_RPT_11")

# COMMAND ----------
# DBTITLE 1, Shortcut_to_SKU_PROFILE_12


query_12 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SKU_NBR AS SKU_NBR,
  SKU_TYPE AS SKU_TYPE,
  PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
  STATUS_ID AS STATUS_ID,
  SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
  SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
  SKU_DESC AS SKU_DESC,
  ALT_DESC AS ALT_DESC,
  SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
  SAP_CLASS_ID AS SAP_CLASS_ID,
  SAP_DEPT_ID AS SAP_DEPT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
  PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
  COUNTRY_CD AS COUNTRY_CD,
  IMPORT_FLAG AS IMPORT_FLAG,
  HTS_CODE_ID AS HTS_CODE_ID,
  CONTENTS AS CONTENTS,
  CONTENTS_UNITS AS CONTENTS_UNITS,
  WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
  WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
  SIZE_DESC AS SIZE_DESC,
  BUM_QTY AS BUM_QTY,
  UOM_CD AS UOM_CD,
  UNIT_NUMERATOR AS UNIT_NUMERATOR,
  UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
  BUYER_ID AS BUYER_ID,
  PURCH_GROUP_ID AS PURCH_GROUP_ID,
  PURCH_COST_AMT AS PURCH_COST_AMT,
  NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
  TAX_CLASS_ID AS TAX_CLASS_ID,
  VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
  BRAND_CD AS BRAND_CD,
  BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
  OWNBRAND_FLAG AS OWNBRAND_FLAG,
  STATELINE_FLAG AS STATELINE_FLAG,
  SIGN_TYPE_CD AS SIGN_TYPE_CD,
  OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
  VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
  INIT_MKDN_DT AS INIT_MKDN_DT,
  DISC_START_DT AS DISC_START_DT,
  ADD_DT AS ADD_DT,
  DELETE_DT AS DELETE_DT,
  UPDATE_DT AS UPDATE_DT,
  FIRST_SALE_DT AS FIRST_SALE_DT,
  LAST_SALE_DT AS LAST_SALE_DT,
  FIRST_INV_DT AS FIRST_INV_DT,
  LAST_INV_DT AS LAST_INV_DT,
  LOAD_DT AS LOAD_DT,
  BASE_NBR AS BASE_NBR,
  BP_COLOR_ID AS BP_COLOR_ID,
  BP_SIZE_ID AS BP_SIZE_ID,
  BP_BREED_ID AS BP_BREED_ID,
  BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
  BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
  BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
  CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
  NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
  NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
  RTV_DEPT_CD AS RTV_DEPT_CD,
  GL_ACCT_NBR AS GL_ACCT_NBR,
  ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
  COMPONENT_FLAG AS COMPONENT_FLAG,
  ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
  ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
  ZDISCO_PID_DT AS ZDISCO_PID_DT,
  ZDISCO_START_DT AS ZDISCO_START_DT,
  ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
  ZDISCO_DC_DT AS ZDISCO_DC_DT,
  ZDISCO_STR_DT AS ZDISCO_STR_DT,
  ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
  ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT
FROM
  SKU_PROFILE"""

df_12 = spark.sql(query_12)

df_12.createOrReplaceTempView("Shortcut_to_SKU_PROFILE_12")

# COMMAND ----------
# DBTITLE 1, SQ_SKU_PROFILE_13


query_13 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  monotonically_increasing_id() AS Monotonically_Increasing_Id
FROM
  Shortcut_to_SKU_PROFILE_12"""

df_13 = spark.sql(query_13)

df_13.createOrReplaceTempView("SQ_SKU_PROFILE_13")

# COMMAND ----------
# DBTITLE 1, Fil_SP_14


query_14 = f"""SELECT
  PRODUCT_ID AS PRODUCT_ID,
  SAP_DIVISION_ID AS SAP_DIVISION_ID,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_SKU_PROFILE_13
WHERE
  SAP_DIVISION_ID <> 2020
  AND SAP_DIVISION_ID <> 8"""

df_14 = spark.sql(query_14)

df_14.createOrReplaceTempView("Fil_SP_14")

# COMMAND ----------
# DBTITLE 1, Jnr_SP_SDSS_15


query_15 = f"""SELECT
  MASTER.LOCATION_ID AS LOCATION_ID,
  MASTER.WEEK_DT AS WEEK_DT,
  MASTER.NET_SALES_AMT AS NET_SALES_AMT,
  MASTER.EXCH_RATE_PCT AS EXCH_RATE_PCT,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id"""

df_15 = spark.sql(query_15)

df_15.createOrReplaceTempView("Jnr_SP_SDSS_15")

# COMMAND ----------
# DBTITLE 1, Jnr_SDSS_PNSP_16


query_16 = f"""SELECT
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.WEEK_DT AS WEEK_DT,
  DETAIL.NET_SALES_AMT AS NET_SALES_AMT,
  DETAIL.EXCH_RATE_PCT AS EXCH_RATE_PCT,
  MASTER.STORE_NBR AS STORE_NBR,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  SQ_PS2_NEW_STORE_PRE_5 MASTER
  INNER JOIN Jnr_SP_SDSS_15 DETAIL ON MASTER.WEEK_DT = DETAIL.WEEK_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID"""

df_16 = spark.sql(query_16)

df_16.createOrReplaceTempView("Jnr_SDSS_PNSP_16")

# COMMAND ----------
# DBTITLE 1, Agg_PNS_17


query_17 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  ROUND(SUM(NET_SALES_AMT * EXCH_RATE_PCT), 2) AS NET_SALES_AMT,
  last(Monotonically_Increasing_Id) AS Monotonically_Increasing_Id
FROM
  Jnr_SDSS_PNSP_16
GROUP BY
  WEEK_DT,
  LOCATION_ID,
  STORE_NBR"""

df_17 = spark.sql(query_17)

df_17.createOrReplaceTempView("Agg_PNS_17")

# COMMAND ----------
# DBTITLE 1, JNRTRANS_18


query_18 = f"""SELECT
  DETAIL.WEEK_DT AS WEEK_DT,
  DETAIL.LOCATION_ID AS LOCATION_ID,
  DETAIL.STORE_NBR AS STORE_NBR,
  DETAIL.PLAN_SALES_AMT1 AS PLAN_SALES_AMT1,
  MASTER.WEEK_DT AS WEEK_DT1,
  MASTER.LOCATION_ID AS LOCATION_ID1,
  MASTER.STORE_NBR AS STORE_NBR1,
  MASTER.NET_SALES_AMT AS NET_SALES_AMT,
  MASTER.Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  Agg_PNS_17 MASTER
  INNER JOIN AGGTRANS_9 DETAIL ON MASTER.WEEK_DT = DETAIL.WEEK_DT
  AND MASTER.LOCATION_ID = DETAIL.LOCATION_ID
  AND MASTER.STORE_NBR = DETAIL.STORE_NBR"""

df_18 = spark.sql(query_18)

df_18.createOrReplaceTempView("JNRTRANS_18")

# COMMAND ----------
# DBTITLE 1, Ups_PS2_NEW_STORE_PRE_19


query_19 = f"""SELECT
  WEEK_DT AS WEEK_DT,
  LOCATION_ID AS LOCATION_ID,
  STORE_NBR AS STORE_NBR,
  PLAN_SALES_AMT1 AS PLAN_SALES_AMT,
  NET_SALES_AMT AS NET_SALES_AMT,
  Monotonically_Increasing_Id AS Monotonically_Increasing_Id
FROM
  JNRTRANS_18"""

df_19 = spark.sql(query_19)

df_19.createOrReplaceTempView("Ups_PS2_NEW_STORE_PRE_19")

# COMMAND ----------
# DBTITLE 1, PS2_NEW_STORE_PRE


spark.sql("""MERGE INTO PS2_NEW_STORE_PRE AS TARGET
USING
  Ups_PS2_NEW_STORE_PRE_19 AS SOURCE ON TARGET.WEEK_DT = SOURCE.WEEK_DT
  AND TARGET.LOCATION_ID = SOURCE.LOCATION_ID
  WHEN MATCHED THEN
UPDATE
SET
  TARGET.WEEK_DT = SOURCE.WEEK_DT,
  TARGET.LOCATION_ID = SOURCE.LOCATION_ID,
  TARGET.STORE_NBR = SOURCE.STORE_NBR,
  TARGET.PLAN_SALES_AMT = SOURCE.PLAN_SALES_AMT,
  TARGET.ACTUAL_SALES_AMT = SOURCE.NET_SALES_AMT""")

# COMMAND ----------
#Post session variable updation
updateVariable(postVariableAssignment, variablesTableName, mainWorkflowId, parentName, "m_ps2_new_store_pre_SALES_PLAN_UPD")

# COMMAND ----------
#Update Mapping Variables in database.
persistVariables(variablesTableName, "m_ps2_new_store_pre_SALES_PLAN_UPD", mainWorkflowId, parentName)
